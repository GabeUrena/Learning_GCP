Getting Started with Google Cloud Development **********
Google Cloud API can be called by using HTTP requests with JavaScript Objects Notation, or JSON, payloads. 
  - Can be called using Google Remote Procedure Call, or gRPC, requests
gRPC is an open-source, remote procedure call framework that can be run anywhere and uses an efficient binary requests structure.
To call Cloud APIs, the caller must supply application credentials

The Google Cloud SDK interacts with Google Cloud products and services.
SDK Features: Command line tools and Language-specific Cloud Client Libraries.
  - These tools and libraries use Cloud APIs to communicate with Google Cloud.

The Google Cloud Command Line Interface, or gcloud CLI, provides tools to manage Google Cloud services from the command line or in automated scripts.
These tools provide the functionality of the Cloud APIs in an easy-to-use command line interface.
  - They automate the process of sending credentials in the Cloud API calls and combine multiple Cloud API calls when required ot complete a single common task
  - You can use gcloud CLI to perform most tasks allowed by the Cloud APIs
     - You can manage virtual machines or deploy applications on Google Cloud.

gsutil can be used to:
Create and delete buckets
Upload, download, and delete objects
List buckets and objects
Move, copy, and rename objects.
Manage access for objects and buckets.

bq is a command-line tool for BigQuery
used for:
Manages datasets, tables, and other BigQuery entities
Run Queries - Main use.

Cloud Client libaries:
Are simpler to use than making direct API calls
Are the recommended methods for making Cloud API requests for applications
Provide an optimized developer experience.
Use each language's natural conventions and style.
Receive performance benefits from gRPC APIs

Creating a Cloud Storage bucket in Python

#import the Cloud Client Library for Cloud Storage
from google.cloud import storage
def create_bucket(name):
  #Instantiate a client
  storage_client = storage.Client()
  #Specify the bucket name
  bucket = storage_client.bucket(name)
  #Specify the storage class
  bucket.storage_class = "NEARLINE"
  #Create the bucket
  new_bucket = storage_client.create_bucket(bucket, location="us")
  return new_bucket

Initialized by running 'gcloud init'.
uses: Install and manage components, Use the gcloud CLI interactive shell, Script gcloud CLI commands

Cloud Shell provides command-line access to a free admin VM
- Browser-based access to a temporary virtual machine
  - 5 GB of persistent disk storage
  - The Google Cloud SDK is pre-installed
Built-in code editor and authorization to Google Cloud Console projects and resources

IDE plugins make creating, deploying, and debugging cloud-native applications easier.
Available for VSCode, JetBrains IDEs (including intelliJ), and Cloud Shell Editor.
Streamline common workflows
Integrates with Secret Manager to securely store sensitive data
Manage Cloud APIs and Cloud Client Libraries.

Cloud Clode for Kurbernetes
Run and debug Kubernetes applications in a local cluster or on Google Kubernetes Engine (GKE)
Visualize and manage Kubernetes resources by using Kubernetes Explorer.
YAML authoring assistance provides autocomplete and inline documentation for Kubernetes configuration files

Cloud Code works with Cloud Run
Run your service and debug locally with Cloud Run Emulator
Deploy apps to Cloud Run from the IDE
Manage Cloud Run services with Cloud Run Explorer.

Emulators for Google Cloud services
Use 'gcloud beta emulator' to install and manage emulators
Switch from using a local emulator to the Google Cloud service without changing the application code
Develop your applications without consuming project resources.
