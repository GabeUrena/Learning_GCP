Deploying Applications Using Cloud Build, Container Registry, and Terraform **************

Implement continuous integration and delivery for reliable releases

Continuous Integration (CI)
Feature Branch                             Development
      CODE      >      BUILD      >          DEPLOY          >      TEST     
Cloud Source        Cloud Build,        Spinnaker, Chef
Repositories,       Jenkins, CircleCI   Puppet, Ansible,
GitHub                                  Terraform
BitBucket
               | Store artifacts |
               *Container registry*
                
  - A developer workflow in which developers frequently pull from the main branch and commit their changes into a feature branch in a source code repository, such as Cloud Source Repository or GitHub
  - These commit triggers are built in a build system such as Jenkins or CircleCI
  - The Build process creates a new application image by using Cloud Build and stores it in an artifact repository, such as Container Registry.
  - A deployment system, such as Spinnaker, deploys the artifacts in your cloud environment.
      - You can use Terraform to stand up resources for the managed services that your application needs.
          - For example, Create Cloud Storage buckets and Pub/Sub topics.
  - After your application is deployed in your development environment, you can automatically run tests to verify your code.
      - If all the tests pass, you can push charges from the feature branch to the main branch.
      
Implement continuous integration and delivery for reliable releases


                              -------------| Store artifacts |
                             /          / *Container Registry*
Continuous Delivery (CD)    /          /
Main/trunk                 /          /   Staging                            Production
      Code      >      Build      >      Deploy      >      Test      >      Release      >      Monitor
Cloud Source      Cloud Build,      Spinnaker, Chef,                    Spinnaker, Chef    Cloud
Repositories,     Jenkins,          Puppet, Ansible,                    Puppet, Ansible,   Monitoring
Github,           CircleCI          Terraform                           Terraform
BitBucket

Continuous Delivery is a workflow that is triggered when changes are pushed to the main branch in the repository
  - The build system builds the code and creates application images,
  - The deployment system deploys the application images to the staging environment and runs integration tests, performance tests, and more.
  - If all tests pass, the build is tagged as a release candidate build. You can manually approve a release candidate build.
  - This approval can trigger deployment to production environments as a canary or blue-green release.
  - You can monitor the performance of your application in the production environment by using monitoring services, such as Cloud Monitoring.
      - If the new deployment functions optimally, you can switch over your entire traffic to this new release. but if you discover problems, you can also quickly roll back to the last stable release.
  - No manual approval process, the deployment system automatically deploys release candidates to the production environment.

Container: An efficient way to isolate code and manage workloads (alternative to hardware virtualization)

Why use containers for deployment? ***************
1. Simply deployment
2. Rapid availability
3. The ability to create microservices
4. Testing is cheaper

Why use Kubernetes?
Automation
      - Automates the deployment, scaling, load balancing, logging, monitoring, and other management features of containerized applications.

Efficient
      - Specifies CPU and memory requirements of containers, Kubernetes can efficiently pack containers and nodes to efficiently use compute nodes.

Declarative Configuration
      - You can configure the desired state you want to achieve.
      - Rather than issuing a series of commands to achieve that desired state Kubernetes will make your system conform to that desired state. This greatly reduces the operational complexity of large systems.

Self-healing
      - Automatically replace containers that have failed or are failing a health check.
      - This leads to many fewer middle-of-the-night pages for operations staff.
      
Google Kubernetes Engine (GKE) is Google Cloud's fully managed service for managing containers and the compute nodes they run on.

Build Pipelines with Cloud Build and Terraform****************************
Cloud Build, is a fully managed service that enables you to set up Build pipelines to create a Docker container image for your application and push the image to a Google Cloud Container Registry.

By using Container Registry in Cloud Build, you can create Build pipelines that are automatically triggered when you commit code to a repository.
In Contrianer Registry, you can create a Build trigger that is executed based on a trigger type.
A trigger type specifies whether a Build should be triggered based on commits to a particular branch in a repository or commits that contain a particular tag.
- You must also create a BuIld configuration file that specifies the steps in the Build pipeline.
Steps are analogous to commands or scripts that you execute to Build your application.
- Each Build step is a Docker container that's invoked by Cloud Build when is executed.
      - The step name identifies a container to invoke for the Build step
- The image attribute contains the name of the container image to be created by this Build configuration

Cloud Build enables you to specify different types of Source Repositories, tag container images to enable searches and create build steps that perform operations like downloading and processing data without even creating a container image.

Build config can be specified in a Yaml or JSON format

Terraform is an open-source tool that lets you provision Google Cloud resources
 - Virtual machines, containers, storage, and networking, with declarative configuration files.
HashiCorp configuration language or HCL allows for concise descriptions of resources using blocks, arguments, and expressions.
The benefit of a declarative approach is that it allows you to specify what the configuration should be and lets the system figure out the steps to take.
Unlike Cloud Shell, TerraForm deploys resources in parallel
The TerraForm language is the user interface to declare resources.
TerraForm configuration is a complete document in the TerraForm language that tells TerraForm how to manage a given collection of infrastructure.

Use the Cloud Foundation Toolkit to optimize your Terraform deployment
 - Reference template, which reflects Google Cloud best practices
 - Repeatable and enterprise-ready
 - Designed to meet compliance and security needs.
 - Provides a consistent set of tools and patterns.

